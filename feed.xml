<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://gbrosgames.github.io/</id><title>Gbros Games</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-08-11T16:14:45+02:00</updated> <author> <name>Gbros Games</name> <uri>https://gbrosgames.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://gbrosgames.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://gbrosgames.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 Gbros Games </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Leveraging SerializeReference for Flexible Commands in Unity Game Development</title><link href="https://gbrosgames.github.io/posts/Leveraging-SerializeReference-for-Flexible-Commands-in-Unity-Game-Development/" rel="alternate" type="text/html" title="Leveraging SerializeReference for Flexible Commands in Unity Game Development" /><published>2023-08-11T00:00:00+02:00</published> <updated>2023-08-11T16:14:05+02:00</updated> <id>https://gbrosgames.github.io/posts/Leveraging-SerializeReference-for-Flexible-Commands-in-Unity-Game-Development/</id> <content src="https://gbrosgames.github.io/posts/Leveraging-SerializeReference-for-Flexible-Commands-in-Unity-Game-Development/" /> <author> <name>Gbros Games</name> </author> <category term="Unity" /> <summary> Introduction In the fast-paced world of game development, time is often a precious commodity. Finding efficient solutions that offer quick testing and flexible configuration becomes paramount. We, too, faced this challenge and discovered a potent approach that not only met these demands but also allowed us to customize our domain’s behavior extensively. Our secret weapon? The SerializeReferen... </summary> </entry> <entry><title>Watchers</title><link href="https://gbrosgames.github.io/posts/Watchers/" rel="alternate" type="text/html" title="Watchers" /><published>2022-06-11T00:00:00+02:00</published> <updated>2022-06-11T12:45:40+02:00</updated> <id>https://gbrosgames.github.io/posts/Watchers/</id> <content src="https://gbrosgames.github.io/posts/Watchers/" /> <author> <name>Gbros Games</name> </author> <category term="Unity" /> <summary> Introduction Have you ever struggled with jumping from tab to tab, from window to window? Are you tired of the endless journey through the object hierarchy to find the right one? Are you tired of scrolling through countless logs to keep track of that one specific value? If you answered yes to any of the above questions, You’ve come to the right place! Jokes aside, in this post we would like ... </summary> </entry> <entry><title>UniRx — PowerObservables</title><link href="https://gbrosgames.github.io/posts/UniRx-PowerObservables/" rel="alternate" type="text/html" title="UniRx — PowerObservables" /><published>2021-07-21T00:00:00+02:00</published> <updated>2022-02-21T13:21:12+01:00</updated> <id>https://gbrosgames.github.io/posts/UniRx-PowerObservables/</id> <content src="https://gbrosgames.github.io/posts/UniRx-PowerObservables/" /> <author> <name>Gbros Games</name> </author> <category term="Unity" /> <summary> Prerequisites Familiar with Observer pattern Hands on any Rx library Introduction PowerObservables are set of time-based operations with ability to pause and possibility to manage tick freqeuency Why Power Observables Easy access to time-based operations Timers / Countdowns based on TimeSpans Ability to pause an observable using another observable (i.e. BoolReactiveProperty) ... </summary> </entry> <entry><title>UniRx Series — [Part 1] — MessageBroker</title><link href="https://gbrosgames.github.io/posts/UniRx-Series-Part-1-MessageBroker/" rel="alternate" type="text/html" title="UniRx Series — [Part 1] — MessageBroker" /><published>2021-03-06T00:00:00+01:00</published> <updated>2022-02-21T13:25:46+01:00</updated> <id>https://gbrosgames.github.io/posts/UniRx-Series-Part-1-MessageBroker/</id> <content src="https://gbrosgames.github.io/posts/UniRx-Series-Part-1-MessageBroker/" /> <author> <name>Gbros Games</name> </author> <category term="Unity" /> <summary> This series will be highly related to UniRx library Prerequisites Familiar with Observer pattern Hands on any Rx library Introduction MessageBroker is an in-memory publish/subscribe messaging system that provides event-driven, decoupled architecture in order to increase performance, reliability and scalability of your Unity application. It has three main components: Publisher of m... </summary> </entry> <entry><title>Stateless in Unity</title><link href="https://gbrosgames.github.io/posts/Stateless-in-Unity/" rel="alternate" type="text/html" title="Stateless in Unity" /><published>2021-02-09T00:00:00+01:00</published> <updated>2022-02-21T18:31:29+01:00</updated> <id>https://gbrosgames.github.io/posts/Stateless-in-Unity/</id> <content src="https://gbrosgames.github.io/posts/Stateless-in-Unity/" /> <author> <name>Gbros Games</name> </author> <category term="Unity" /> <summary> Prerequisites Familiar with state pattern Hands on events Hands on generics Introduction We were looking for lightweight solution for managing state of entities in Unity. We placed our bet on Stateless.NET library that we used previously during development of .NET Applications. It’s a nice and lightweight library under Apache 2.0 License. Why stateless? Flexible Lightweight Hie... </summary> </entry> </feed>
